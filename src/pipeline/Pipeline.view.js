import * as React from "react";
import { useContext, useEffect, useState } from "react";
import Box from "@mui/material/Box";
import { Typography, } from "@mui/material";
import SectionView from "./Section.view";
import KeyboardDoubleArrowRightIcon from "@mui/icons-material/KeyboardDoubleArrowRight";
import { SectionModel } from "./Pipeline.model";
import { NodeStatusEnum } from "../nodes/NodeStatus.enum";
import PipelineColors from "../common/Pipeline.colors";
import { AddCircle } from "@mui/icons-material";
import DeleteIcon from "@mui/icons-material/Delete";
import { WorkPanelContext } from "../workpanel/WorkPanel.view";
import { UpdateMode } from "../workpanel/WorkPanel.controller";
/**
 * 单条流水线的View
 * @param props
 * @constructor
 * 工作流场景下可以被删除，
 * 模板场景下可以修改标题和删除Pipeline,增加新的Section
 */
export default function PipelineView(props) {
    const { pipeline } = props;
    const { sections, isTemplate } = pipeline;
    const workPanelController = useContext(WorkPanelContext);
    const [title, setTitle] = useState(pipeline.title);
    useEffect(() => {
        setTitle(pipeline.title);
        updatePipelineStatus();
    }, [pipeline]);
    const getColor = () => {
        return PipelineColors.COLOR_MAP[pipeline.status];
    };
    const handlePipelineNameChange = (event) => {
        setTitle(event.target.value);
        const newPipeline = Object.assign({}, pipeline, { title: event.target.value });
        workPanelController.updatePipeline(newPipeline);
    };
    const handlePipelineDeleted = () => {
        workPanelController.updatePipeline(pipeline, UpdateMode.DELETE);
    };
    const getActionView = () => {
        return React.createElement(Box, { onClick: handlePipelineDeleted },
            React.createElement(DeleteIcon, null));
    };
    const getTitleView = () => {
        if (!isTemplate) {
            return React.createElement(Box, { sx: { display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', width: '100%' } },
                React.createElement(Typography, { sx: { fontSize: 20, fontWeight: 600, textAlign: 'center' } }, '任务: ' + props.pipeline.title),
                getActionView());
        }
        else {
            return React.createElement(Box, { sx: { display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', width: '100%' } },
                React.createElement("input", { className: 'workflow-input', style: { fontSize: 20, fontWeight: 600 }, id: "template-simple", value: title, onChange: handlePipelineNameChange }),
                getActionView());
        }
    };
    const getSubTitleView = () => {
        if (!isTemplate) {
            return React.createElement(Typography, { sx: { fontSize: 18, color: getColor(), fontWeight: 600, marginTop: 2, textAlign: 'center' } }, '工作流: ' + props.pipeline.templateTitle);
        }
        else {
            return React.createElement(Typography, { sx: { fontSize: 18, fontWeight: 600, marginTop: 2, textAlign: 'center' } }, '编辑工作流模板');
        }
    };
    const getDividerView = (index, end) => {
        if (!isTemplate) {
            if (index === 0 || index == end)
                return false;
            return React.createElement(KeyboardDoubleArrowRightIcon, { style: { margin: '10px 10px 10px 10px' } });
        }
        return React.createElement(Box, { key: 'addCircle-' + index, onClick: () => { insertNewSection(index); } },
            React.createElement(AddCircle, { style: { margin: '10px 10px 10px 10px' } }));
    };
    const insertNewSection = (index) => {
        sections.splice(index, 0, SectionModel.newInstance());
        const newPipeline = Object.assign({}, pipeline);
        workPanelController.updatePipeline(newPipeline);
    };
    const getSectionViews = () => {
        let sectionViews = [];
        sectionViews.push(getDividerView(0));
        for (let i = 0; i < sections.length; i++) {
            let couldUpdate = i == 0 ? true : sections[i - 1].status == NodeStatusEnum.DONE;
            sectionViews.push(React.createElement(SectionView, { key: 'section-' + sections[i].id, pipeline: pipeline, section: sections[i], couldUpdate: couldUpdate, editorMode: isTemplate }));
            sectionViews.push(getDividerView(i + 1, sections.length));
        }
        return sectionViews;
    };
    const isPending = (section) => section.status == NodeStatusEnum.PENDING;
    const isDone = (section) => section.status == NodeStatusEnum.DONE;
    const getPipelineStatus = () => {
        if (sections.every(isPending)) {
            return NodeStatusEnum.PENDING;
        }
        else if (sections.every(isDone)) {
            return NodeStatusEnum.DONE;
        }
        else {
            return NodeStatusEnum.WORKING;
        }
    };
    const updatePipelineStatus = () => {
        if (getPipelineStatus() == pipeline.status) {
            return;
        }
        workPanelController.updatePipeline(Object.assign({}, pipeline, { status: getPipelineStatus() }));
    };
    /**
     * 更新所有Pipelines中的对应节点
     */
    return (React.createElement("div", { style: { display: 'flex', width: '100%', alignItems: 'center', justifyContent: 'center', height: '100%', paddingTop: '50px', flexDirection: 'column', minHeight: '1px', minWidth: '1px' } },
        getTitleView(),
        getSubTitleView(),
        React.createElement("div", { style: { width: '100%', height: '100%', overflow: 'scroll', marginTop: '10px' } },
            React.createElement("div", { style: { display: 'inline-flex', flexDirection: 'row', alignItems: 'flex-start', margin: '0px 50px 50px 50px' } }, getSectionViews()))));
}
//# sourceMappingURL=data:application/json;base64,