import * as React from "react";
import { useContext, useEffect, useRef, useState } from "react";
import { PomodoroStatus } from "./Pomodoro.model";
import { TimeUtils } from "../utils/Time.utils";
import { WorkPanelContext } from "../workpanel/WorkPanel.view";
import { NotificationUtils } from "../utils/Notification.utils";
export default function PomodoroView(props) {
    const { pomodoro } = props;
    const workPanelController = useContext(WorkPanelContext);
    const [title, setTitle] = useState(pomodoro.title);
    const [timeLeft, setTimeLeft] = useState(pomodoro.timeleft);
    let timer = useRef();
    let pomodoroRef = useRef(pomodoro);
    useEffect(() => {
        timer.current = setInterval(tick, 1000);
        return () => {
            clearInterval(timer.current);
        };
    }, []);
    useEffect(() => {
        pomodoroRef.current = pomodoro;
    }, [props]);
    const getPomodoro = () => {
        return pomodoroRef.current;
    };
    const tick = () => {
        if (getPomodoro().editMode) {
            return;
        }
        if (getPomodoro().status != PomodoroStatus.RUNNING) {
            return;
        }
        const copiedPomodoro = Object.assign({}, getPomodoro(), { timeleft: getPomodoro().timeleft - 1 });
        if (copiedPomodoro.timeleft <= 0) {
            copiedPomodoro.status = PomodoroStatus.FINISHED;
            NotificationUtils.sendMessage('Pomodoro [' + getPomodoro().title + '] has finished');
        }
        workPanelController.updatePomodoro(copiedPomodoro);
    };
    const handlePomodoroTitleChange = (event) => {
        setTitle(event.target.value);
        workPanelController.updatePomodoro(Object.assign({}, pomodoro, { title: event.target.value }));
    };
    const handlePomodoroTimeLeftChange = (event) => {
        const timeLeft = Number(event.target.value);
        setTimeLeft(timeLeft);
        workPanelController.updatePomodoro(Object.assign({}, pomodoro, { timeleft: timeLeft }));
    };
    const getTitleView = () => {
        if (pomodoro.editMode) {
            return React.createElement("input", { className: 'workflow-input', placeholder: 'Pomodoro title', style: { height: 25, width: '100%', fontSize: 16, fontWeight: 600, textAlign: 'center' }, id: "pomodoro-title", value: title, onChange: handlePomodoroTitleChange });
        }
        else {
            return React.createElement("div", { className: 'workflow-text-accent', style: { width: '100%', fontSize: 16, fontWeight: 600 } },
                " ", pomodoro === null || pomodoro === void 0 ? void 0 :
                pomodoro.title,
                " ");
        }
    };
    const getTimeLeftOptions = () => {
        const options = [];
        options.push(React.createElement("option", { key: '100', value: '10' },
            'test',
            " "));
        options.push(React.createElement("option", { key: '900', value: '900' },
            '15min',
            " "));
        options.push(React.createElement("option", { key: '1800', value: '1800' },
            '30min',
            " "));
        options.push(React.createElement("option", { key: '2700', value: '2700' },
            '45min',
            " "));
        return options;
    };
    const getTimeLeftView = () => {
        if (pomodoro.editMode) {
            return React.createElement("select", { value: timeLeft, style: { height: 25, width: '100%', fontSize: 16, fontWeight: 600, marginLeft: 3, textAlign: 'center' }, name: "select-type", onChange: handlePomodoroTimeLeftChange }, getTimeLeftOptions());
        }
        else {
            return React.createElement("div", { style: { minWidth: 50 } }, TimeUtils.getMMSSStr(pomodoro.timeleft));
        }
    };
    return (React.createElement("div", { className: 'workflow-container-inner', style: {
            maxWidth: 400,
            justifyContent: 'center',
            alignItems: 'center',
            display: 'flex',
            flexDirection: 'row',
        } },
        getTitleView(),
        getTimeLeftView()));
}
//# sourceMappingURL=data:application/json;base64,