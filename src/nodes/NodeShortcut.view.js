import { Divider, Typography } from "@mui/material";
import { Platform, TFile, Vault } from "obsidian";
import PlayCircleFilledWhiteIcon from "@mui/icons-material/PlayCircleFilledWhite";
import * as React from "react";
import { useContext, useEffect, useState } from "react";
import { CommandType } from "./Command";
import { TimeUtils } from "../utils/Time.utils";
import { getVaultBasePath, replaceAllSlashes } from "../settings/SettingHelper";
import { WorkPanelContext } from "../workpanel/WorkPanel.view";
import { getAllFolders, openFileInNewLeaf } from "../utils/File.utils";
export default function NodeShortcutView(nodeViewProps) {
    const workPanelController = useContext(WorkPanelContext);
    const { editorMode, nodeShortCutModel, onUpdateShortCut } = nodeViewProps;
    const shortCutCommand = Platform.isMacOS ? nodeShortCutModel.macCommand : nodeShortCutModel.command;
    const [shortCutName, setShortcutName] = useState(nodeShortCutModel.name || '');
    const [shortCutCommandType, setShortCutCommandType] = useState(shortCutCommand.type);
    useEffect(() => {
        setShortcutName((nodeShortCutModel === null || nodeShortCutModel === void 0 ? void 0 : nodeShortCutModel.name) || '');
        setShortCutCommandType(shortCutCommand.type);
    }, [nodeShortCutModel]);
    /**
     * here are the order sequence on Windows
     * 1. switch volume (like D:)
     * 2. cd to the folder that contains the script
     * 3. run the script with commandFolder as argument
     * Only .bat file is supported
     */
    const getWindowsCommand = () => {
        const vaultPath = getVaultBasePath(app);
        const commandPath = `${vaultPath}/${shortCutCommand.commandFile}`;
        const commandFolderPath = replaceAllSlashes(commandPath.substring(0, commandPath.lastIndexOf('/')));
        const scriptName = shortCutCommand.commandFile.substring(shortCutCommand.commandFile.lastIndexOf('/') + 1);
        const commandFolder = `${vaultPath}/${shortCutCommand.commandFolder}`;
        const commandDescFolderPath = replaceAllSlashes(commandFolder.substring(0, commandFolder.lastIndexOf('/')));
        let switchVolume = vaultPath.substring(0, vaultPath.lastIndexOf(':') + 1);
        return `${switchVolume} & cd ${commandFolderPath} & ${scriptName} "${commandDescFolderPath}"`;
    };
    /**
     * to be decided on MacOS
     */
    const getMacCommand = () => {
        const vaultPath = getVaultBasePath(app);
        const commandPath = `${vaultPath}/${shortCutCommand.commandFile}`;
        const commandFolder = `${vaultPath}/${shortCutCommand.commandFolder}`;
        return `${commandPath}`;
    };
    const getMacCommandFolder = () => {
        const vaultPath = getVaultBasePath(app);
        const commandFolder = `${vaultPath}/${shortCutCommand.commandFolder}`;
        return `"${commandFolder}"`;
    };
    // execute the stored command
    const onShortcutClick = () => {
        if (!Platform.isDesktop) {
            return;
        }
        // execute the shell command in a sub-process, folder is passed as an argument
        // can`t be used because not enter the folder
        if (shortCutCommand.type === CommandType.SHELL) {
            if (!shortCutCommand.commandFile) {
                return;
            }
            if (Platform.isMacOS) {
                console.log("file path: ", getMacCommand());
                const result = require('child_process').execFile(getMacCommand(), [getMacCommandFolder()]);
            }
            else {
                require('child_process').exec(getWindowsCommand(), { encoding: 'utf-8' });
            }
        }
        else if (shortCutCommand.type === CommandType.COPY_FILE) {
            if (!shortCutCommand.commandFile || !shortCutCommand.commandFolder) {
                return;
            }
            const originalFileName = shortCutCommand.commandFile.substring(shortCutCommand.commandFile.lastIndexOf('/') + 1);
            const newFilePath = `${shortCutCommand.commandFolder}${TimeUtils.getDateStr(Date.now())}-${originalFileName}`;
            app.vault.adapter.exists(newFilePath).then((exist) => {
                if (exist) {
                    openFileInNewLeaf(newFilePath, app);
                }
                else {
                    app.vault.adapter.copy(shortCutCommand.commandFile, newFilePath).then(() => {
                        openFileInNewLeaf(newFilePath, app);
                    });
                }
            });
        }
        else if (shortCutCommand.type === CommandType.OPEN_FILE) {
            if (!shortCutCommand.commandFile) {
                return;
            }
            openFileInNewLeaf(shortCutCommand.commandFile, app);
        }
    };
    const handleNodeShortcutNameChange = (event) => {
        setShortcutName(event.target.value);
        nodeShortCutModel.name = event.target.value;
        onUpdateShortCut(nodeShortCutModel);
    };
    const handleNodeShortcutTypeChange = (event) => {
        const commandType = event.target.value;
        if (commandType === shortCutCommand.type) {
            return;
        }
        setShortCutCommandType(commandType);
        shortCutCommand.type = commandType;
        onUpdateShortCut(nodeShortCutModel);
    };
    const handleNodeShortcutFileChange = (event) => {
        shortCutCommand.commandFile = event.target.value;
        onUpdateShortCut(nodeShortCutModel);
    };
    const handleNodeShortcutFolderChange = (event) => {
        shortCutCommand.commandFolder = event.target.value;
        onUpdateShortCut(nodeShortCutModel);
    };
    const getTypeOptions = () => {
        const options = [];
        options.push(React.createElement("option", { value: CommandType.SHELL }, CommandType.SHELL));
        options.push(React.createElement("option", { value: CommandType.COPY_FILE }, CommandType.COPY_FILE));
        options.push(React.createElement("option", { value: CommandType.OPEN_FILE }, CommandType.OPEN_FILE));
        return options;
    };
    useEffect(() => {
        getScriptOptions();
    });
    const getScriptOptions = () => {
        var _a;
        const options = [];
        const settings = (_a = workPanelController.plugin) === null || _a === void 0 ? void 0 : _a.settings;
        const shellFolder = app.vault.getAbstractFileByPath((settings === null || settings === void 0 ? void 0 : settings.scriptPath) || '');
        Vault.recurseChildren(shellFolder, (f) => {
            if (f instanceof TFile) {
                if (!Platform.isMacOS && f.extension.toLowerCase() !== 'bat') {
                    return;
                }
                if (Platform.isMacOS && f.extension.toLowerCase() !== 'sh') {
                    return;
                }
                options.push(React.createElement("option", { value: f.path }, f.path));
            }
        });
        return options;
    };
    const getFileOptions = () => {
        const options = [];
        const files = app.vault.getFiles();
        for (const file of files) {
            options.push(React.createElement("option", { key: file.path, value: file.path }, file.path));
        }
        return options;
    };
    const getFolderOptions = () => {
        const options = [];
        for (const folder of getAllFolders(app)) {
            options.push(React.createElement("option", { key: folder, value: folder },
                folder,
                " "));
        }
        return options;
    };
    const getEditorModeView = () => {
        return (React.createElement("div", { style: {
                display: 'flex',
                flexDirection: 'column',
            } },
            React.createElement(Divider, { sx: { marginY: '3px' } }),
            React.createElement("div", { style: { display: "flex", flexDirection: 'row', alignItems: 'center' } },
                React.createElement("text", { style: { fontSize: 12, height: 12, verticalAlign: "bottom", width: 60 } }, "Name: "),
                React.createElement("input", { className: 'workflow-input', placeholder: 'Shortcut name here', style: { width: '100%', height: 20, fontSize: 12 }, id: "shortcut-name", value: shortCutName, onChange: handleNodeShortcutNameChange })),
            React.createElement("div", { style: { display: "flex", flexDirection: 'row', alignItems: 'center' } },
                React.createElement("text", { style: { fontSize: 12, height: 12, verticalAlign: "bottom", width: 60 } }, "Type: "),
                React.createElement("select", { style: { width: '100%', fontSize: 10, height: 20, marginTop: 3 }, name: "select-type", value: shortCutCommand.type, onChange: handleNodeShortcutTypeChange }, getTypeOptions())),
            React.createElement("div", { style: { display: "flex", flexDirection: 'row', alignItems: 'center' } },
                React.createElement("text", { style: { fontSize: 12, height: 12, verticalAlign: "bottom", width: 60 } }, "File: "),
                React.createElement("select", { value: shortCutCommand.commandFile, style: { width: '100%', fontSize: 10, height: 20, marginTop: 3 }, name: "select-type", onChange: handleNodeShortcutFileChange }, shortCutCommandType == CommandType.SHELL ? getScriptOptions() : getFileOptions())),
            React.createElement("div", { style: { display: "flex", flexDirection: 'row', alignItems: 'center' } },
                React.createElement("text", { style: { fontSize: 12, height: 12, verticalAlign: "bottom", width: 60 } }, "Folder: "),
                React.createElement("select", { value: shortCutCommand.commandFolder, style: { width: '100%', fontSize: 10, height: 20, marginTop: 3 }, name: "select-type", onChange: handleNodeShortcutFolderChange }, getFolderOptions()))));
    };
    // modify the conditions here.
    const getWorkflowModeView = () => {
        if (shortCutCommand.type == CommandType.SHELL && !shortCutCommand.commandFile) {
            return null;
        }
        // Mac且没有macShortCut,直接返回
        if (shortCutCommand.type == CommandType.COPY_FILE && (!shortCutCommand.commandFile || !shortCutCommand.commandFolder)) {
            return null;
        }
        return (React.createElement("div", null,
            React.createElement(Divider, { sx: { marginY: '3px' } }),
            React.createElement("div", { style: {
                    display: 'flex',
                    flexDirection: 'row',
                    alignItems: 'center',
                    justifyContent: 'flex-start',
                    marginBottom: 1,
                    marginTop: 1
                }, onClick: () => { onShortcutClick(); } },
                React.createElement(PlayCircleFilledWhiteIcon, { sx: { width: 16, height: 16, marginRight: 1 } }),
                React.createElement(Typography, { sx: { fontSize: 12 } },
                    nodeShortCutModel.name,
                    " "))));
    };
    const getShortcutView = () => {
        if (editorMode) {
            return getEditorModeView();
        }
        else {
            return getWorkflowModeView();
        }
    };
    return (React.createElement("div", null, getShortcutView()));
}
//# sourceMappingURL=data:application/json;base64,