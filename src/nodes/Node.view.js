import * as React from "react";
import { useContext, useEffect, useState } from "react";
import Box from "@mui/material/Box";
import { Divider, Menu, MenuItem, Typography } from "@mui/material";
import { NodeActionEnum, NodeStatusEnum } from "./NodeStatus.enum";
import { TimeUtils } from "../utils/Time.utils";
import DeleteIcon from '@mui/icons-material/Delete';
import WatchLaterIcon from '@mui/icons-material/WatchLater';
import RunCircleIcon from '@mui/icons-material/RunCircle';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import UnfoldLessIcon from '@mui/icons-material/UnfoldLess';
import UnfoldMoreIcon from '@mui/icons-material/UnfoldMore';
import HighlightOffIcon from '@mui/icons-material/HighlightOff';
import { WorkPanelContext } from "../workpanel/WorkPanel.view";
import { UpdateMode } from "../workpanel/WorkPanel.controller";
import NodeShortcutView from "./NodeShortcut.view";
export default function NodeView(nodeViewProps) {
    var _a, _b;
    const workPanelController = useContext(WorkPanelContext);
    const { pipeline, section, node, couldUpdate, editorMode } = nodeViewProps;
    const [showTips, setShowTips] = useState(false);
    const [anchorEl, setAnchorEl] = useState(null);
    const [title, setTitle] = useState(node.title);
    const [tipSummary, setTipSummary] = useState(((_a = node.tips) === null || _a === void 0 ? void 0 : _a.summary) || '');
    const [tipContent, setTipContent] = useState(((_b = node.tips) === null || _b === void 0 ? void 0 : _b.content) || '');
    const open = Boolean(anchorEl);
    useEffect(() => {
        var _a, _b;
        setTitle(node.title);
        setTipSummary(((_a = node.tips) === null || _a === void 0 ? void 0 : _a.summary) || '');
        setTipContent(((_b = node.tips) === null || _b === void 0 ? void 0 : _b.content) || '');
    }, [node]);
    const handleStatusClick = (event) => {
        if (!couldUpdate || editorMode) {
            return;
        }
        if (node.status == NodeStatusEnum.DONE) {
            return;
        }
        setAnchorEl(event.currentTarget);
    };
    const onNodeUpdate = () => {
        const newNode = Object.assign({}, node);
        workPanelController.updateNode(pipeline, section, newNode);
        console.log('onNodeUpdate is called');
    };
    const onNodeDelete = () => {
        workPanelController.updateNode(pipeline, section, node, UpdateMode.DELETE);
    };
    const handleClose = (action) => {
        setAnchorEl(null);
        if (!action)
            return;
        switch (action) {
            case NodeActionEnum.WORK:
                node.status = NodeStatusEnum.WORKING;
                node.startTime = Date.now();
                break;
            case NodeActionEnum.CANCEL:
                node.status = NodeStatusEnum.PENDING;
                node.startTime = 0;
                break;
            case NodeActionEnum.FINISH:
                node.status = NodeStatusEnum.DONE;
                node.finishTime = Date.now();
                break;
            case NodeActionEnum.FINISH_DIRECTLY:
                node.status = NodeStatusEnum.DONE;
                node.startTime = Date.now();
                node.finishTime = Date.now();
                break;
        }
        onNodeUpdate();
    };
    const getColorFromNodeStatus = () => {
        if (!couldUpdate || editorMode) {
            return "#6C6C6C";
        }
        switch (node.status) {
            case NodeStatusEnum.PENDING:
                return '#7e57c2';
            case NodeStatusEnum.WORKING:
                return '#42a5f5';
            case NodeStatusEnum.DONE:
                return '#9ccc65';
        }
    };
    const getStatusIcon = () => {
        switch (node.status) {
            case NodeStatusEnum.PENDING:
                return React.createElement(WatchLaterIcon, { htmlColor: getColorFromNodeStatus() });
            case NodeStatusEnum.WORKING:
                return React.createElement(RunCircleIcon, { htmlColor: getColorFromNodeStatus() });
            case NodeStatusEnum.DONE:
                return React.createElement(CheckCircleIcon, { htmlColor: getColorFromNodeStatus() });
        }
    };
    const getMenuItems = () => {
        let items = [];
        switch (node.status) {
            case NodeStatusEnum.PENDING:
                items.push([
                    React.createElement(MenuItem, { sx: { fontSize: 13 }, onClick: () => {
                            handleClose(NodeActionEnum.WORK);
                        } }, NodeActionEnum.WORK),
                    React.createElement(MenuItem, { sx: { fontSize: 13 }, onClick: () => {
                            handleClose(NodeActionEnum.FINISH_DIRECTLY);
                        } }, NodeActionEnum.FINISH_DIRECTLY),
                ]);
                break;
            case NodeStatusEnum.WORKING:
                items.push([
                    React.createElement(MenuItem, { sx: { fontSize: 13 }, onClick: () => {
                            handleClose(NodeActionEnum.CANCEL);
                        } }, NodeActionEnum.CANCEL),
                    React.createElement(MenuItem, { sx: { fontSize: 13 }, onClick: () => {
                            handleClose(NodeActionEnum.FINISH);
                        } }, NodeActionEnum.FINISH)
                ]);
                break;
            case NodeStatusEnum.DONE:
                break;
        }
        return items;
    };
    const clearTips = () => {
        setTipSummary('');
        setTipContent('');
    };
    const getTipsButton = () => {
        if (!editorMode) {
            if (showTips) {
                return React.createElement(UnfoldLessIcon, { onClick: () => { setShowTips(!showTips); } });
            }
            else {
                return React.createElement(UnfoldMoreIcon, { onClick: () => { setShowTips(!showTips); } });
            }
        }
        else {
            return React.createElement(HighlightOffIcon, { onClick: () => clearTips() });
        }
    };
    const getTipsView = () => {
        if (!editorMode && !node.tips.summary) {
            return false;
        }
        return React.createElement("div", null,
            React.createElement(Divider, { sx: { marginY: '3px' } }),
            React.createElement(Box, { sx: { display: 'flex', flexDirection: 'column', justifyContent: 'space-between' } },
                React.createElement(Box, { sx: {
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'space-between',
                    } },
                    getTipSummaryView(),
                    getTipsButton()),
                getTipsContentView()));
    };
    const getTipSummaryView = () => {
        if (!editorMode) {
            return React.createElement(Typography, { sx: { fontSize: 14, fontWeight: '600' } }, node.tips.summary);
        }
        else {
            return React.createElement("input", { className: 'workflow-input', placeholder: 'Tip summary', style: { fontSize: 14, maxWidth: 130, fontWeight: 600 }, id: "tip-summary", value: tipSummary, onChange: handleNodeTipSummaryChange });
        }
    };
    const getTipsContentView = () => {
        if (!editorMode) {
            if (!node.tips.content) {
                return null;
            }
            if (showTips) {
                return React.createElement(Typography, { sx: { fontSize: 12 } }, node.tips.content);
            }
            else {
                return null;
            }
        }
        else {
            return React.createElement("textarea", { placeholder: 'Tip content', style: { fontSize: 12, marginTop: 3, minWidth: 160, maxWidth: 160 }, id: "tip-content", value: tipContent, onChange: handleNodeTipContentChange });
        }
    };
    const getTimeDetails = () => {
        if (editorMode) {
            return false;
        }
        let details = [];
        switch (node.status) {
            case NodeStatusEnum.DONE:
                details.push(React.createElement(Typography, { sx: { fontSize: 12 } }, 'Finish: ' + TimeUtils.getDateTimeStr(node.finishTime)));
                details.push(React.createElement(Typography, { sx: { fontSize: 12 } }, 'Start: ' + TimeUtils.getDateTimeStr(node.startTime)));
                break;
            case NodeStatusEnum.WORKING:
                details.push(React.createElement(Typography, { sx: { fontSize: 12 } }, 'Start: ' + TimeUtils.getDateTimeStr(node.startTime)));
                break;
            case NodeStatusEnum.PENDING:
                break;
        }
        if (!details || details.length == 0) {
            return false;
        }
        return React.createElement("div", null,
            React.createElement(Divider, { sx: { marginY: '3px' } }),
            details);
    };
    const handleNodeNameChange = (event) => {
        setTitle(event.target.value);
        node.title = event.target.value;
        onNodeUpdate();
    };
    const handleNodeTipSummaryChange = (event) => {
        setTipSummary(event.target.value);
        node.tips.summary = event.target.value;
        onNodeUpdate();
    };
    const handleNodeTipContentChange = (event) => {
        setTipContent(event.target.value);
        node.tips.content = event.target.value;
        onNodeUpdate();
    };
    const handleNodeShortCutChange = (nodeShortCutModel) => {
        node.shortcut = nodeShortCutModel;
        onNodeUpdate();
    };
    const getHeaderView = () => {
        return React.createElement("div", null,
            React.createElement(Box, { sx: {
                    display: 'flex',
                    flexDirection: 'row',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                } },
                getTitleView(),
                getActionView()));
    };
    const getTitleView = () => {
        if (!editorMode) {
            return React.createElement(Typography, { sx: { fontSize: 14, fontWeight: 600 } }, node.title);
        }
        else {
            return React.createElement("input", { className: 'workflow-input', style: { fontSize: 14, maxWidth: 130, fontWeight: 600 }, id: "title", value: title, onChange: handleNodeNameChange });
        }
    };
    const getActionView = () => {
        if (!editorMode) {
            return (React.createElement("div", null,
                React.createElement("div", { onClick: handleStatusClick }, getStatusIcon()),
                React.createElement(Menu, { "aria-labelledby": "node-manage", anchorEl: anchorEl, open: open, onClose: () => {
                        handleClose();
                    } }, getMenuItems())));
        }
        else {
            return (React.createElement(DeleteIcon, { onClick: () => onNodeDelete() }));
        }
    };
    return (React.createElement(Box, { className: 'workflow-container-inner', sx: { width: 180, padding: 1, borderRadius: 1, boxShadow: 1, id: node.id } },
        getHeaderView(),
        getTipsView(),
        getTimeDetails(),
        React.createElement(NodeShortcutView, { editorMode: editorMode, nodeShortCutModel: node.shortcut, onUpdateShortCut: handleNodeShortCutChange })));
}
//# sourceMappingURL=data:application/json;base64,