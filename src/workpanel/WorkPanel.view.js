import * as React from 'react';
import { useEffect } from 'react';
import WorkflowView from "../workflow/Workflow.view";
import { UpdateMode } from "./WorkPanel.controller";
const defaultController = {
    plugin: undefined,
    updatePipeline(pipeline) { },
    updateSection(pipeline, section) { },
    updateNode(pipeline, section, node) { },
    updatePomodoro(pomodoro) { },
    updateSubject(subject, updateMode = UpdateMode.UPDATE) { }
};
export const WorkPanelContext = React.createContext(defaultController);
export default function WorkPanelView(props) {
    const parseData = (dataStr) => {
        return JSON.parse(dataStr);
    };
    const [workPanelData, setWorkPanelData] = React.useState(parseData(props.data));
    const ref = React.useRef(null);
    /**
     * 保存文件
     */
    useEffect(() => {
        props.saveData(JSON.stringify(workPanelData));
    }, [workPanelData]);
    const workPanelController = {
        plugin: props.plugin,
        updatePipeline(pipeline, updateMode = UpdateMode.UPDATE) {
            const originalPipelines = pipeline.isTemplate ? workPanelData.templates : workPanelData.workflows;
            const newPipelines = [];
            for (let i = 0; i < originalPipelines.length; i++) {
                if (originalPipelines[i].id != pipeline.id) {
                    newPipelines.push(originalPipelines[i]);
                }
                else if (updateMode == UpdateMode.UPDATE) {
                    newPipelines.push(pipeline);
                }
            }
            if (updateMode == UpdateMode.ADD) {
                newPipelines.push(pipeline);
            }
            setWorkPanelData(Object.assign({}, workPanelData, pipeline.isTemplate ? { templates: newPipelines } : { workflows: newPipelines }));
        },
        updateSection(pipeline, section, updateMode = UpdateMode.UPDATE) {
            const originalSections = pipeline.sections;
            const newSections = [];
            for (let i = 0; i < originalSections.length; i++) {
                if (originalSections[i].id !== section.id) {
                    newSections.push(originalSections[i]);
                }
                else if (updateMode == UpdateMode.UPDATE) {
                    newSections.push(section);
                }
            }
            if (updateMode == UpdateMode.ADD) {
                newSections.push(section);
            }
            this.updatePipeline(Object.assign({}, pipeline, { sections: newSections }));
        },
        updateNode(pipeline, section, node, updateMode = UpdateMode.UPDATE) {
            const originalNodes = section.nodes;
            const newNodes = [];
            for (let i = 0; i < originalNodes.length; i++) {
                if (originalNodes[i].id !== node.id) {
                    newNodes.push(originalNodes[i]);
                }
                else if (updateMode == UpdateMode.UPDATE) {
                    newNodes.push(node);
                }
            }
            if (updateMode == UpdateMode.ADD) {
                newNodes.push(node);
            }
            this.updateSection(pipeline, Object.assign({}, section, { nodes: newNodes }));
        },
        updatePomodoro(pomodoro, updateMode = UpdateMode.UPDATE) {
            const originalPomodoro = workPanelData.pomodoro;
            const newPomodoro = [];
            for (let i = 0; i < originalPomodoro.length; i++) {
                if (originalPomodoro[i].id != pomodoro.id) {
                    newPomodoro.push(originalPomodoro[i]);
                }
                else if (updateMode == UpdateMode.UPDATE) {
                    newPomodoro.push(pomodoro);
                }
            }
            if (updateMode == UpdateMode.ADD) {
                newPomodoro.push(pomodoro);
            }
            setWorkPanelData(Object.assign({}, workPanelData, { pomodoro: newPomodoro }));
        },
        updateSubject(subject, updateMode = UpdateMode.UPDATE) {
            const originalSubject = workPanelData.subject;
            const parentSubject = subject.parentID == originalSubject.id ? originalSubject
                : searchParentSubject(originalSubject, subject.parentID);
            if (!parentSubject) {
                return;
            }
            const newChildren = [];
            for (let i = 0; i < parentSubject.children.length; i++) {
                if (parentSubject.children[i].id != subject.id) {
                    newChildren.push(parentSubject.children[i]);
                }
                else if (updateMode == UpdateMode.UPDATE) {
                    newChildren.push(subject);
                }
            }
            if (updateMode == UpdateMode.ADD) {
                newChildren.push(subject);
            }
            parentSubject.children = newChildren;
            setWorkPanelData(Object.assign({}, workPanelData));
        }
    };
    const searchParentSubject = (rootSubject, parentSubjectID) => {
        for (let i = 0; i < rootSubject.children.length; i++) {
            if (rootSubject.children[i].id == parentSubjectID) {
                return rootSubject.children[i];
            }
            else {
                const searchResult = searchParentSubject(rootSubject.children[i], parentSubjectID);
                if (searchResult != null) {
                    return searchResult;
                }
            }
        }
        return null;
    };
    return (React.createElement(WorkPanelContext.Provider, { value: workPanelController },
        React.createElement("div", { style: { width: '100%', height: '100%' }, ref: ref },
            React.createElement(WorkflowView, { workflows: workPanelData.workflows, templates: workPanelData.templates, pomodoro: workPanelData.pomodoro, subject: workPanelData.subject }))));
}
//# sourceMappingURL=data:application/json;base64,