import { SubjectModel } from "./Subject.model";
import * as React from "react";
import { useContext, useState } from "react";
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import DeleteIcon from '@mui/icons-material/Delete';
import { WorkPanelContext } from "../workpanel/WorkPanel.view";
import { UpdateMode } from "../workpanel/WorkPanel.controller";
const SubjectView = ({ subject }) => {
    const workPanelController = useContext(WorkPanelContext);
    const [isExpanded, setIsExpanded] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [name, setName] = useState(subject.name);
    const handleAddChild = () => {
        const newSubject = SubjectModel.newInstance();
        newSubject.parentID = subject.id;
        workPanelController.updateSubject(newSubject, UpdateMode.ADD);
        setIsExpanded(true);
    };
    const handleDelete = () => {
        workPanelController.updateSubject(subject, UpdateMode.DELETE);
    };
    const handleUpdateName = () => {
        const newSubject = Object.assign({}, subject, { name: name });
        workPanelController.updateSubject(newSubject);
        setIsEditing(false);
    };
    const handleCancelEdit = () => {
        setIsEditing(false);
        setName(subject.name);
    };
    const handleExpand = () => {
        setIsExpanded(!isExpanded);
    };
    const handleNameChange = (event) => {
        setName(event.target.value);
    };
    const handleNameKeyPress = (event) => {
        if (event.key === 'Enter') {
            handleUpdateName();
        }
    };
    const renderChildren = () => {
        if (subject.children.length === 0) {
            return null;
        }
        return (React.createElement("div", { style: { marginLeft: 20 } }, subject.children.map((child) => (React.createElement(SubjectView, { subject: child })))));
    };
    return (React.createElement("div", { style: { maxHeight: 400, overflowY: 'scroll' } },
        React.createElement("div", { className: 'workflow-container-inner', style: { display: 'flex', flexDirection: 'row', alignItems: 'center', marginTop: 3 } },
            React.createElement("div", { style: { display: 'flex', alignItems: 'center', marginRight: 3 }, onClick: handleExpand }, isExpanded ? React.createElement(ExpandLessIcon, { fontSize: 'inherit' }) : React.createElement(ExpandMoreIcon, { fontSize: 'inherit' })),
            isEditing ? (React.createElement("input", { type: "text", value: name, onChange: handleNameChange, onKeyPress: handleNameKeyPress })) : (React.createElement("span", { onClick: () => setIsEditing(true) }, subject.name)),
            React.createElement("span", { className: 'workflow-span', style: { marginLeft: 3, marginRight: 3 } }, subject.score),
            React.createElement(AddCircleIcon, { style: { marginLeft: 3 }, fontSize: 'inherit', onClick: handleAddChild }),
            React.createElement(DeleteIcon, { style: { marginLeft: 3 }, fontSize: 'inherit', onClick: handleDelete })),
        isExpanded && renderChildren()));
};
export default SubjectView;
//# sourceMappingURL=data:application/json;base64,